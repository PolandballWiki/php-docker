name: Build and push PHP base image

on:
  push:
    branches:
      - main
    paths:
      - 'dockerfiles/php-base/**'  # Only trigger on Dockerfile changes
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/polandballwiki/php-base

jobs:
  changes:
    name: Detect changed PHP versions
    runs-on: ubuntu-latest
    outputs:
      php_versions: ${{ steps.filter.outputs.changes }}
      should_run: ${{ steps.check_run.outputs.should_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed for file comparison

      - name: Detect file changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            8.1: ['dockerfiles/php-base/8.1/**']
            8.3: ['dockerfiles/php-base/8.3/**']
            # Add more PHP versions as needed

      - name: Determine if workflow should run
        id: check_run
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] || [ "${{ steps.filter.outputs.changes }}" != "[]" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
            
      - name: List detected changes
        run: |
          echo "Changed PHP versions: ${{ steps.filter.outputs.changes }}"
          echo "Should run: ${{ steps.check_run.outputs.should_run }}"

  build:
    name: Build PHP Base Image (${{ matrix.php.version }}, ${{ matrix.os.prettyname }})
    needs: changes
    if: needs.changes.outputs.should_run == 'true'
    runs-on: ${{ matrix.os.fullname }}
    strategy:
      fail-fast: false
      matrix:
        php:
          - { version: "8.1", suffix: "php81" }
          - { version: "8.3", suffix: "php83" }
        os:
          - { prettyname: Linux AMD64, fullname: ubuntu-22.04, platform: linux/amd64, cache_id: linux-amd64 }
          - { prettyname: Linux ARM64, fullname: ubuntu-22.04, platform: linux/arm64, cache_id: linux-arm64 }
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract PHP version from Dockerfile
        id: php_version
        run: |
          DOCKERFILE="./dockerfiles/php-base/${{ matrix.php.version }}/Dockerfile"
          # Extract the full version from the FROM instruction (assumes format like php:8.1.30-fpm-alpine)
          FULL_VERSION=$(grep '^FROM php:' "$DOCKERFILE" | sed -E 's/FROM php:([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          MAJOR_MINOR=$(echo "$FULL_VERSION" | cut -d. -f1,2)
          PATCH_VERSION=$(echo "$FULL_VERSION" | cut -d. -f3)
          
          echo "full_version=$FULL_VERSION" >> $GITHUB_OUTPUT
          echo "major_minor=$MAJOR_MINOR" >> $GITHUB_OUTPUT
          echo "patch_version=$PATCH_VERSION" >> $GITHUB_OUTPUT
          
          echo "Detected versions:"
          echo "Full version: $FULL_VERSION"
          echo "Major.Minor: $MAJOR_MINOR"
          echo "Patch: $PATCH_VERSION"

      - name: Check if Dockerfile changed
        id: check_version
        run: |
          echo "Event type: ${{ github.event_name }}"
          echo "Changes output: ${{ needs.changes.outputs.php_versions }}"
          echo "Matrix version: ${{ matrix.php.version }}"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            if echo '${{ needs.changes.outputs.php_versions }}' | jq -e 'contains(["${{ matrix.php.version }}"])' > /dev/null; then
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Docker meta
        id: meta
        if: steps.check_version.outputs.should_build == 'true'
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.php_version.outputs.major_minor }}
            type=raw,value=${{ steps.php_version.outputs.major_minor }}-${{ github.run_number }}

      - name: Set up Docker Buildx
        if: steps.check_version.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        if: matrix.os.platform == 'linux/arm64' && steps.check_version.outputs.should_build == 'true'
        uses: docker/setup-qemu-action@v2
   
      - name: Login to GitHub Container Registry
        if: steps.check_version.outputs.should_build == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        if: steps.check_version.outputs.should_build == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./dockerfiles/php-base/${{ matrix.php.version }}
          file: ./dockerfiles/php-base/${{ matrix.php.version }}/Dockerfile
          platforms: ${{ matrix.os.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache-${{ matrix.php.suffix }}-${{ matrix.os.cache_id }}
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache-${{ matrix.php.suffix }}-${{ matrix.os.cache_id }},mode=max

      - name: Export digests and metadata
        if: steps.check_version.outputs.should_build == 'true'
        run: |
          mkdir -p /tmp/digests
          # Save digest
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          # Save version metadata
          echo "${{ steps.php_version.outputs.major_minor }}" > /tmp/digests/major_minor
          echo "${{ steps.php_version.outputs.patch_version }}" > /tmp/digests/patch_version
          echo "${{ steps.php_version.outputs.full_version }}" > /tmp/digests/full_version

      - name: Upload digests
        if: steps.check_version.outputs.should_build == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: digests-${{ matrix.php.version }}
          path: /tmp/digests/
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge digests
    runs-on: ubuntu-22.04
    needs: [changes, build]
    if: needs.changes.outputs.should_run == 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download all digests
        uses: actions/download-artifact@v3
        with:
          path: /tmp/digests-all

      - name: Merge digest files and extract versions
        id: versions
        run: |
          mkdir -p /tmp/digests
          # Get version info from first artifact (they should all be the same version)
          MAJOR_MINOR=$(cat $(find /tmp/digests-all -name major_minor | head -n1))
          PATCH_VERSION=$(cat $(find /tmp/digests-all -name patch_version | head -n1))
          FULL_VERSION=$(cat $(find /tmp/digests-all -name full_version | head -n1))
          
          echo "major_minor=$MAJOR_MINOR" >> $GITHUB_OUTPUT
          echo "patch_version=$PATCH_VERSION" >> $GITHUB_OUTPUT
          echo "full_version=$FULL_VERSION" >> $GITHUB_OUTPUT
          
          # Copy digests
          for dir in /tmp/digests-all/*; do
            if [ -d "$dir" ]; then
              # Only copy SHA256 digest files, not the version metadata
              find "$dir" -type f -not -name "major_minor" -not -name "patch_version" -not -name "full_version" -exec cp {} /tmp/digests/ \;
            fi
          done

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.versions.outputs.major_minor }}
            type=raw,value=${{ steps.versions.outputs.major_minor }}-${{ github.run_number }}
            type=raw,value=${{ steps.versions.outputs.full_version }}
            type=raw,value=${{ steps.versions.outputs.full_version }}-${{ github.run_number }}
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
  
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
